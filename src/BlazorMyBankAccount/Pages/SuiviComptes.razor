@page "/suivi"
@attribute [Authorize(Roles = "Admin, Member")]
@inject ISuiviCompteViewModel ViewModel

<h2>Suivi des Comptes</h2>

@if (ViewModel.HasConfig)
{
	<div class="w-100">
		<RadzenDropDown TValue="Compte" 
					Placeholder="Choisir un compte..." 
					Data=@ViewModel.Comptes
					TextProperty="Nomcompte" 
					Disabled=@ViewModel.IsLoading
					Change=@(args => ViewModel.OnSelectCompte(args))
					@bind-Value="ViewModel.CompteSelected" />
	</div>
}

@if(ViewModel.IsLoading)
{
	<div>Chargement des données.</div>
}
else
{
	@if(ViewModel.HasConfig)
	{
	@*Pour l'ajout d'une nouvelle saisie.*@
	<div>
		<EditForm OnValidSubmit="@ViewModel.OnValidSubmit"
						  Model="@ViewModel.TransacValidation">
		
		<RadzenCard>
		@* Super IMPORTANT !!! *@
		<DataAnnotationsValidator />

		<h2>Ajout d'une nouvelle opération bancaire</h2>

		<div class="row">
		
		<div class="margin-5px w-50 col">
			<div>
			Date de la transaction
			</div>

			<RadzenDatePicker @bind-Value="ViewModel.TransacValidation.DateTransaction"
							DateFormat="d" />
		</div>

		<div class="margin-5px col">
			<div>
				Nom transaction
			</div>
			<div>
				<ValidationMessage For="@(() => ViewModel.TransacValidation.NomTransaction)" />
			</div>
			<RadzenTextBox Placeholder="Nom..."
						@bind-Value="ViewModel.TransacValidation.NomTransaction" />
		</div>

		<div class="margin-5px col">
			<div>
				Montant de la transaction
			</div>

			<div>
				<ValidationMessage For="@(() => ViewModel.TransacValidation.Montant)" />
			</div>
			<RadzenNumeric TValue="decimal" 
							Format="c" 
							@bind-Value="ViewModel.TransacValidation.Montant"
							Placeholder="Montant" 
							 />
		</div>

		<div class="margin-5px col">
			<div>
				Type de transaction
			</div>

			<div>
				<ValidationMessage For="@(() => ViewModel.TransacValidation.TypeTransac)" />
			</div>
			<RadzenDropDown AllowClear="true" 
						TValue="Typestransaction" 
						Placeholder="Choisir un type..." 
						Data=@ViewModel.TypesTransaction
						TextProperty="Nom"
						@bind-Value="ViewModel.TransacValidation.TypeTransac"
						Disabled=@ViewModel.IsLoading />
		</div>

		<div class="margin-5px col">
			<div>
				Transaction validé ?
			</div>

			<RadzenCheckBox @bind-Value="ViewModel.TransacValidation.IsValide" 
							Name="CheckBox1" 
							TValue="bool" />
		</div>

			<div class="margin-10px col">
				<button type="submit" class="padding-5">Ajouter</button>

				<button type="reset"
						class="padding-5"
						@onclick="ViewModel.AnnulerSaisie">
					Annuler
				</button>
			</div>

			</div>
			</RadzenCard>
		</EditForm>
	</div>

<div>
	<RadzenGrid AllowFiltering="true"
				FilterCaseSensitivity="FilterCaseSensitivity.Default"
				AllowPaging="true"
				PageSize="30"
				AllowSorting="true"
				Data="@ViewModel.SuiviDuCompte"
				TItem="Suivicompte"
				EmptyText="Aucune transaction"
				@ref="ViewModel.SaisieGrid">
		<Columns>
			@*Date*@
			<RadzenGridColumn TItem="Suivicompte"
							  Property="Datetransaction"
							  Title="Date"
							  Filterable="false"
							  Format="date-time"
							  Width="150px">
				<Template Context="transact">
					@String.Format("{0:d}", transact.Datetransaction)
				</Template>
			</RadzenGridColumn>

			@*Montant*@
			<RadzenGridColumn TItem="Suivicompte"
							  Property="Montant"
							  Title="Montant"
							  Width="150px" />
			
			@*Nom de la transaction*@
			<RadzenGridColumn TItem="Suivicompte"
							  Property="Nomtransaction"
							  Title="Nom"
							  Width="150px" />
			@*Type*@
			<RadzenGridColumn TItem="Suivicompte"
							  Property="Type.Nom"
							  Title="Type"
							  Width="150px">
			</RadzenGridColumn>

			<RadzenGridColumn TItem="Suivicompte"
							  Property="Isvalidate"
							  Title="Est validé ?">
				<Template Context="suivi">
					<RadzenCheckBox Value="suivi.Isvalidate"
									Name="CheckBox1" 
									TValue="bool" />
				</Template>
			</RadzenGridColumn>
		</Columns>
	</RadzenGrid>
</div>

}
	else
	{
	<h1>Attention</h1>
    
    <div>Aucun compte par défaut configuré.</div>
    <div>Connectez vous, et configurer un compte par défaut et le mois/année de traitement.</div>	
	}

}

@code {
	protected async override Task OnInitializedAsync()
	{
		await ViewModel.InitData();
	}
}